<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      .chessboard {
        display: grid;
        grid-template-columns: repeat(8, 1fr);
        grid-template-rows: repeat(8, 1fr);
        user-select: none;
      }
      h1,p{
        padding: 20px;
        color: #b5f0ed;
        font-size: 2rem;
        font-weight: 700;
        text-align: center;
        margin-top: 60px; /* Adjust as needed */
        margin-bottom: 60px; /* Adjust as needed */

      }
      .square {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2rem;
        user-select: none;
      }
      .light {
        background-color: #f0d9b5;
      }
      .dark {
        background-color: #b58863;
      }
      .light-piece {
        color: white;
      } /* Customize color for light pieces */
      .dark-piece {
        color: black;
      }
      .flipped {
        transform: rotate(180deg);
      }
      .flipped .square {
        transform: rotate(180deg);
      }
      .controls {
        display: flex;
        justify-content: center;
        margin-top: 20px; /* Adjust as needed */
        margin-bottom: 20px; /* Adjust as needed */
      }
      #reset {
        margin-right: 10px;
        padding: 2px 5px;
        background-color: #f0d9b5;
        border: 1px solid #b58863;
      }
      #newGame {
        margin-right: 10px;
        padding: 2px 5px;
        background-color: #b5f0ed;
        border: 1px solid #63b5ae;
      }
      #resign {
        margin-right: 10px;
        padding: 2px 5px;
        background-color: #f1e185;
        border: 1px solid #6e6908;
      }
      #draw {
        margin-right: 10px;
        padding: 2px 5px;
        background-color: #c685f1;
        border: 1px solid #6e086e;
      }
      #undo {
        margin-right: 10px;
        padding: 2px 5px;
        background-color: #f1e185;
        border: 1px solid #6e6908;
      }
      #redo {
        margin-right: 10px;
        padding: 2px 5px;
        background-color: #f18585;
        border: 1px solid #6e0808;
      }
      #loadGame {
        margin-right: 10px;
        padding: 2px 5px;
        background-color: #97f185;
        border: 1px solid #086e11;
      }
      #saveGame {
        margin-right: 10px;
        padding: 2px 5px;
        background-color: #97f185;
        border: 1px solid #086e11;
      }
    </style>
  </head>
  <body>
    <div class="w-full h-[100vh] bg-zinc-900  ">
      <h1 id="player"></h1>
      <p id="moviid"></p>
      <div class="flex items-center justify-center">
        <div class="chessboard w-96 h-96 bg-red-400"></div>

      </div>
      <div class="controls">
        <button id="reset">Reset</button>
        <button id="newGame">New Game</button>
        <button id="resign">Resign</button>
        <button id="draw">Draw</button>
        <button id="undo">Undo</button>
        <button id="redo">Redo</button>
        <button id="loadGame">Load Game</button>
        <button id="saveGame">Save Game</button>
      </div>
    </div>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.5/socket.io.min.js"
      integrity="sha512-11t8Q+vY9JlCrr+PveZKTYJq8n7O09Y5X/pk/aMd3vJugSvu4xOunGEUzaADqL3I8cZKE/pBwwCfXzDkRJh2sQ=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.3/chess.min.js"
      integrity="sha512-xRllwz2gdZciIB+AkEbeq+gVhX8VB8XsfqeFbUh+SzHlN96dEduwtTuVuc2u9EROlmW9+yhRlxjif66ORpsgVA=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <!-- <script src="/js/socket.js"></script> -->
    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chess Game</title>
</head>
<body>
    <h1>Chess Game</h1>
    <div id="player">Connecting...</div>
    <div class="chessboard"></div>
    <button id="reset">Reset</button>
    <button id="newGame">New Game</button>
    <button id="resign">Resign</button>
    <button id="draw">Draw</button>
    <button id="undo">Undo</button>
    <button id="redo">Redo</button>
    <button id="loadGame">Load Game</button>
    <button id="saveGame">Save Game</button>
    <div id="moviid"></div>

    <script src="https://cdn.socket.io/4.0.0/socket.io.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.3/chess.min.js"></script>
    <script>
        const socket = io("https://game.godcrafts.fun", {
            transports: ["websocket", "polling"]
        });

        socket.on('connect_error', (error) => {
            console.error('Connection Error:', error);
        });

        socket.on('connect_failed', () => {
            console.error('Connection Failed');
        });

        const chess = new Chess();
        const boardElement = document.querySelector(".chessboard");
        let draggedPiece = null;
        let sourceSquare = null;
        let playerRole = null;
        const player = document.querySelector("#player");
        const moveid = document.querySelector("#moviid");

        const renderBoard = () => {
            const board = chess.board();
            boardElement.innerHTML = "";
            board.forEach((row, rowindex) => {
                row.forEach((square, squareindex) => {
                    const squareElement = document.createElement("div");
                    squareElement.classList.add("square", (rowindex + squareindex) % 2 === 0 ? "light" : "dark");
                    squareElement.dataset.row = rowindex;
                    squareElement.dataset.col = squareindex;
                    if (square) {
                        const pieceElement = document.createElement("div");
                        pieceElement.classList.add("piece", square.color === "w" ? "light-piece" : "dark-piece");
                        pieceElement.innerText = getPieceUnicode(square);
                        pieceElement.draggable = playerRole === square.color;

                        pieceElement.addEventListener("dragstart", (e) => {
                            draggedPiece = pieceElement;
                            sourceSquare = { row: rowindex, col: squareindex };
                            e.dataTransfer.setData("text/plain", "");
                        });

                        pieceElement.addEventListener("dragend", () => {
                            draggedPiece = null;
                            sourceSquare = null;
                        });

                        squareElement.appendChild(pieceElement);
                    }

                    squareElement.addEventListener("dragover", (e) => e.preventDefault());

                    squareElement.addEventListener("drop", (e) => {
                        e.preventDefault();
                        if (draggedPiece) {
                            const targetSquare = { row: parseInt(e.target.dataset.row), col: parseInt(e.target.dataset.col) };
                            handleMove(sourceSquare, targetSquare);
                        }
                    });

                    boardElement.appendChild(squareElement);
                });
            });

            if (playerRole === 'b') {
                boardElement.classList.add("flipped");
            } else {
                boardElement.classList.remove("flipped");
            }
        };

        const handleMove = (source, target) => {
            const sourceSquare = String.fromCharCode(97 + source.col) + (8 - source.row);
            const targetSquare = String.fromCharCode(97 + target.col) + (8 - target.row);
            const move = { from: sourceSquare, to: targetSquare, promotion: "q" };
            socket.emit("move", move);
        };

        const getPieceUnicode = (piece) => {
            const pieceUnicode = {
                p: '♙', r: '♜', n: '♞', b: '♝', q: '♛', k: '♚', // Black pieces
                P: '♙', R: '♖', N: '♘', B: '♗', Q: '♕', K: '♔'  // White pieces
            };
            return pieceUnicode[piece.type] || '';
        };

        socket.on("playerRole", (role) => {
            console.log(role);
            playerRole = role;
            renderBoard();
        });

        socket.on("spectatorRole", () => {
            playerRole = null;
            renderBoard();
        });

        socket.on("boardState", (data) => {
            chess.load(data);
            renderBoard();
        });

        socket.on("move", (data) => {
            chess.move(data);
            renderBoard();
            moveid.textContent = `Move: ${data.from}-${data.to}`;
        });

        socket.on("invalidMove", () => {
            chess.undo();
            player.textContent = `Invalid move`;
        });

        socket.on("disconnect", () => {
            player.textContent = `Player left the game`;
            playerRole = null;
            renderBoard();
        });

        socket.on("connect", () => {
            player.textContent = `Player joined the game`;
            console.log("Connected");
        });

        socket.on("error", (error) => {
            player.textContent = `Error: ${error}`;
            console.log(error);
        });

        document.getElementById('reset').addEventListener('click', () => socket.emit('reset'));
        document.getElementById('newGame').addEventListener('click', () => socket.emit('newGame'));
        document.getElementById('resign').addEventListener('click', () => socket.emit('resign'));
        document.getElementById('draw').addEventListener('click', () => socket.emit('draw'));
        document.getElementById('undo').addEventListener('click', () => socket.emit('undo'));
        document.getElementById('redo').addEventListener('click', () => socket.emit('redo'));
        document.getElementById('loadGame').addEventListener('click', () => {
            const fen = prompt("Enter FEN:");
            if (fen) socket.emit('loadGame', fen);
        });
        document.getElementById('saveGame').addEventListener('click', () => socket.emit('saveGame'));

        renderBoard();
    </script>
</body>
</html>

  </body>
</html>
